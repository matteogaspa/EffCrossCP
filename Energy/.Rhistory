cov_ols[i,2] <- cov_int(cr_ols$int_cce[[i]]$set, ytest[i])
len_ols[i,2] <- len_int(cr_ols$int_cce[[i]]$set)
# u-cc
cov_ols[i,3] <- cov_int(cr_ols$int_ccu[[i]]$set, ytest[i])
len_ols[i,3] <- len_int(cr_ols$int_ccu[[i]]$set)
# eu-cc
cov_ols[i,4] <- cov_int(cr_ols$int_cceu[[i]]$set, ytest[i])
len_ols[i,4] <- len_int(cr_ols$int_cceu[[i]]$set)
# cc
cov_ols[i,5] <- cov_int(cr_ols$int_ccs[[i]]$set, ytest[i])
len_ols[i,5] <- len_int(cr_ols$int_ccs[[i]]$set)
# splt
cov_ols[i,6] <- cov_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,6] <- len_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2))
# full
cov_ols[i,7] <- cov_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,7] <- len_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2))
}
cov_ols_fn <- rbind(cov_ols_fn, cov_ols)
len_ols_fn <- rbind(len_ols_fn, len_ols)
cov_res_ols[b,] <- colMeans(cov_ols)
len_res_ols[b,] <- colMeans(len_ols)
cat(b,"\n")
}
rm(list = ls())
library(conformalInference)
library(tidyr)
library(ggplot2)
library(MASS)
source("utils2.R")
# Load dataset
data("Boston")
df <- Boston
y <- df$medv
X <- df[,1:13]
# set hyper parameters -----
n_train <- 200
n       <- NROW(y)
n_test  <- n-n_train
K       <- 5
alpha   <- 0.1
lambda  <- 0.01
ntree   <- 20
funs1   <- lm.funs()
# Simulation study
B <- 100
cov_ols_fn <- len_ols_fn <- NULL
cov_res_ols <- len_res_ols <- matrix(NA, ncol = 7, nrow = B)
for(b in 43:45){
set.seed(b+45)
train <- sample(1:NROW(y), n_train, replace = F)
test  <- setdiff(1:NROW(y), train)
ytrain <- y[train]
Xtrain <- X[train,]
ytest <- y[test]
Xtest <- X[test,]
# Cross-conf
cr_ols <- cc_ols(y = ytrain, X = as.matrix(Xtrain), x_test = as.matrix(Xtest), K = K, alpha = alpha)
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha)
# full
full_ols <- conformal.pred(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha, num.grid.pts = 200)
cov_ols <- len_ols <- matrix(NA, nrow = n_test, ncol = 7)
for(i in 1:n_test){
# mod-cc
cov_ols[i,1] <- cov_int(cr_ols$int_cc[[i]]$set, ytest[i])
len_ols[i,1] <- len_int(cr_ols$int_cc[[i]]$set)
# e-cc
cov_ols[i,2] <- cov_int(cr_ols$int_cce[[i]]$set, ytest[i])
len_ols[i,2] <- len_int(cr_ols$int_cce[[i]]$set)
# u-cc
cov_ols[i,3] <- cov_int(cr_ols$int_ccu[[i]]$set, ytest[i])
len_ols[i,3] <- len_int(cr_ols$int_ccu[[i]]$set)
# eu-cc
cov_ols[i,4] <- cov_int(cr_ols$int_cceu[[i]]$set, ytest[i])
len_ols[i,4] <- len_int(cr_ols$int_cceu[[i]]$set)
# cc
cov_ols[i,5] <- cov_int(cr_ols$int_ccs[[i]]$set, ytest[i])
len_ols[i,5] <- len_int(cr_ols$int_ccs[[i]]$set)
# splt
cov_ols[i,6] <- cov_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,6] <- len_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2))
# full
cov_ols[i,7] <- cov_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,7] <- len_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2))
}
cov_ols_fn <- rbind(cov_ols_fn, cov_ols)
len_ols_fn <- rbind(len_ols_fn, len_ols)
cov_res_ols[b,] <- colMeans(cov_ols)
len_res_ols[b,] <- colMeans(len_ols)
cat(b,"\n")
}
# Cross-conf
cr_ols <- cc_ols(y = ytrain, X = as.matrix(Xtrain), x_test = as.matrix(Xtest), K = K, alpha = alpha)
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha)
# full
full_ols <- conformal.pred(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha, num.grid.pts = 200)
set.seed(b+45)
train <- sample(1:NROW(y), n_train, replace = F)
test  <- setdiff(1:NROW(y), train)
ytrain <- y[train]
Xtrain <- X[train,]
ytest <- y[test]
Xtest <- X[test,]
# Cross-conf
cr_ols <- cc_ols(y = ytrain, X = as.matrix(Xtrain), x_test = as.matrix(Xtest), K = K, alpha = alpha)
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha)
## given the training data compute \hat\beta = X^+ Y
# X: matrix of covariates
# y: vector of responses
# out: element fixed to NA (used for the package conformalInference)
beta <- ginv(X)%*%y
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = ols_pseudo, predict.fun = ols_pseudo_predict(), alpha = alpha)
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = ols_pseudo, predict.fun = ols_pseudo_predict, alpha = alpha)
rm(list = ls())
library(conformalInference)
library(tidyr)
library(ggplot2)
library(MASS)
source("utils2.R")
# Load dataset
data("Boston")
df <- Boston
y <- df$medv
X <- df[,1:13]
# set hyper parameters -----
n_train <- 200
n       <- NROW(y)
n_test  <- n-n_train
K       <- 5
alpha   <- 0.1
lambda  <- 0.01
ntree   <- 20
# Simulation study
B <- 100
cov_ols_fn <- len_ols_fn <- NULL
cov_res_ols <- len_res_ols <- matrix(NA, ncol = 7, nrow = B)
for(b in 43:45){
set.seed(b+45)
train <- sample(1:NROW(y), n_train, replace = F)
test  <- setdiff(1:NROW(y), train)
ytrain <- y[train]
Xtrain <- X[train,]
ytest <- y[test]
Xtest <- X[test,]
# Cross-conf
cr_ols <- cc_ols(y = ytrain, X = as.matrix(Xtrain), x_test = as.matrix(Xtest), K = K, alpha = alpha)
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = ols_pseudo, predict.fun = ols_pseudo_predict, alpha = alpha)
# full
full_ols <- conformal.pred(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = ols_pseudo, predict.fun = ols_pseudo_predict, alpha = alpha, num.grid.pts = 200)
cov_ols <- len_ols <- matrix(NA, nrow = n_test, ncol = 7)
for(i in 1:n_test){
# mod-cc
cov_ols[i,1] <- cov_int(cr_ols$int_cc[[i]]$set, ytest[i])
len_ols[i,1] <- len_int(cr_ols$int_cc[[i]]$set)
# e-cc
cov_ols[i,2] <- cov_int(cr_ols$int_cce[[i]]$set, ytest[i])
len_ols[i,2] <- len_int(cr_ols$int_cce[[i]]$set)
# u-cc
cov_ols[i,3] <- cov_int(cr_ols$int_ccu[[i]]$set, ytest[i])
len_ols[i,3] <- len_int(cr_ols$int_ccu[[i]]$set)
# eu-cc
cov_ols[i,4] <- cov_int(cr_ols$int_cceu[[i]]$set, ytest[i])
len_ols[i,4] <- len_int(cr_ols$int_cceu[[i]]$set)
# cc
cov_ols[i,5] <- cov_int(cr_ols$int_ccs[[i]]$set, ytest[i])
len_ols[i,5] <- len_int(cr_ols$int_ccs[[i]]$set)
# splt
cov_ols[i,6] <- cov_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,6] <- len_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2))
# full
cov_ols[i,7] <- cov_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,7] <- len_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2))
}
cov_ols_fn <- rbind(cov_ols_fn, cov_ols)
len_ols_fn <- rbind(len_ols_fn, len_ols)
cov_res_ols[b,] <- colMeans(cov_ols)
len_res_ols[b,] <- colMeans(len_ols)
cat(b,"\n")
}
rm(list = ls())
library(conformalInference)
library(tidyr)
library(ggplot2)
library(MASS)
source("utils2.R")
# Load dataset
data("Boston")
df <- Boston
y <- df$medv
X <- df[,1:13]
# set hyper parameters -----
n_train <- 200
n       <- NROW(y)
n_test  <- n-n_train
K       <- 5
alpha   <- 0.1
lambda  <- 0.01
ntree   <- 20
# Simulation study
B <- 100
cov_ols_fn <- len_ols_fn <- NULL
cov_res_ols <- len_res_ols <- matrix(NA, ncol = 7, nrow = B)
for(b in 1:B){
set.seed(b+45)
train <- sample(1:NROW(y), n_train, replace = F)
test  <- setdiff(1:NROW(y), train)
ytrain <- y[train]
Xtrain <- X[train,]
ytest <- y[test]
Xtest <- X[test,]
# Cross-conf
cr_ols <- cc_ols(y = ytrain, X = as.matrix(Xtrain), x_test = as.matrix(Xtest), K = K, alpha = alpha)
# split
splt_ols <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = ols_pseudo, predict.fun = ols_pseudo_predict, alpha = alpha)
# full
full_ols <- conformal.pred(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = ols_pseudo, predict.fun = ols_pseudo_predict, alpha = alpha, num.grid.pts = 200)
cov_ols <- len_ols <- matrix(NA, nrow = n_test, ncol = 7)
for(i in 1:n_test){
# mod-cc
cov_ols[i,1] <- cov_int(cr_ols$int_cc[[i]]$set, ytest[i])
len_ols[i,1] <- len_int(cr_ols$int_cc[[i]]$set)
# e-cc
cov_ols[i,2] <- cov_int(cr_ols$int_cce[[i]]$set, ytest[i])
len_ols[i,2] <- len_int(cr_ols$int_cce[[i]]$set)
# u-cc
cov_ols[i,3] <- cov_int(cr_ols$int_ccu[[i]]$set, ytest[i])
len_ols[i,3] <- len_int(cr_ols$int_ccu[[i]]$set)
# eu-cc
cov_ols[i,4] <- cov_int(cr_ols$int_cceu[[i]]$set, ytest[i])
len_ols[i,4] <- len_int(cr_ols$int_cceu[[i]]$set)
# cc
cov_ols[i,5] <- cov_int(cr_ols$int_ccs[[i]]$set, ytest[i])
len_ols[i,5] <- len_int(cr_ols$int_ccs[[i]]$set)
# splt
cov_ols[i,6] <- cov_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,6] <- len_int(matrix(c(splt_ols$lo[i], splt_ols$up[i]), ncol = 2))
# full
cov_ols[i,7] <- cov_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2), ytest[i])
len_ols[i,7] <- len_int(matrix(c(full_ols$lo[i], full_ols$up[i]), ncol = 2))
}
cov_ols_fn <- rbind(cov_ols_fn, cov_ols)
len_ols_fn <- rbind(len_ols_fn, len_ols)
cov_res_ols[b,] <- colMeans(cov_ols)
len_res_ols[b,] <- colMeans(len_ols)
cat(b,"\n")
}
save(cov_res_ols, len_res_ols, cov_ols_fn, len_ols_fn, file = "boston.RData")
load("boston.RData")
tab <- rbind(
#c("mod-cross", "e-mod-cross", "u-mod-cross", "eu-mod-cross", "cross", "split", "full"),
apply(len_res_ols, 2, mean),
apply(len_res_ols, 2, sd),
apply(len_res_ols, 2, median),
apply(len_res_ols, 2, min),
apply(len_res_ols, 2, max),
apply(cov_res_ols, 2, mean)
)
rownames(tab) <- c("Mean", "Sd", "Median", "Min", "Max", "Coverage")
xtable::xtable(tab, digits = 3)
save(cov_res_ols, len_res_ols, cov_ols_fn, len_ols_fn, file = "boston.RData")
load("boston.RData")
tab <- rbind(
#c("mod-cross", "e-mod-cross", "u-mod-cross", "eu-mod-cross", "cross", "split", "full"),
apply(len_res_ols, 2, mean),
apply(len_res_ols, 2, sd),
apply(len_res_ols, 2, median),
apply(len_res_ols, 2, min),
apply(len_res_ols, 2, max),
apply(cov_res_ols, 2, mean)
)
rownames(tab) <- c("Mean", "Sd", "Median", "Min", "Max", "Coverage")
xtable::xtable(tab, digits = 3)
rm(list = ls())
library(conformalInference)
library(tidyr)
library(ggplot2)
source("utils2.R")
# Load dataset
df <- read.csv("abalone.csv", header = T, stringsAsFactors = T)
y <- df$Rings
X1 <- model.matrix(~df$Sex)   # cat. vars
setwd("~/Downloads/ab/CODEcc100/Abalone")
rm(list = ls())
library(conformalInference)
library(tidyr)
library(ggplot2)
source("utils2.R")
# Load dataset
df <- read.csv("abalone.csv", header = T, stringsAsFactors = T)
y <- df$Rings
X1 <- model.matrix(~df$Sex)   # cat. vars
X2 <- df[,2:8]                # num. vars
X <- cbind(X1, X2)            # covariates
# set hyper parameters -----
n_train <- 4000
n       <- NROW(y)
n_test  <- n-n_train
K       <- 10
alpha   <- 0.1
ntree   <- 25
funs1   <- rf.funs(ntree = ntree)
# Simulation study
B <- 100
cov_rf_fn  <- len_rf_fn <- NULL
cov_res_rf <- len_res_rf <- matrix(NA, ncol = 7, nrow = B)
for(b in 1:B){
set.seed(b+100)
train <- sample(1:NROW(y), n_train, replace = F)
test  <- setdiff(1:NROW(y), train)
ytrain <- y[train]
Xtrain <- X[train,]
ytest <- y[test]
Xtest <- X[test,]
# Cross-conf
cr_rf <- cc_rf(y = ytrain, X = as.matrix(Xtrain), x_test = as.matrix(Xtest), K = K, alpha = alpha, ntree = ntree)
# split
splt_rf <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha)
# split 2alpha
splt_rf2 <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = as.matrix(Xtest), train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = 2*alpha)
cov_rf <- len_rf <- matrix(NA, nrow = n_test, ncol = 7)
for(i in 1:n_test){
# mod-cc
cov_rf[i,1] <- cov_int(cr_rf$int_cc[[i]]$set, ytest[i])
len_rf[i,1] <- len_int(cr_rf$int_cc[[i]]$set)
# e-cc
cov_rf[i,2] <- cov_int(cr_rf$int_cce[[i]]$set, ytest[i])
len_rf[i,2] <- len_int(cr_rf$int_cce[[i]]$set)
# u-cc
cov_rf[i,3] <- cov_int(cr_rf$int_ccu[[i]]$set, ytest[i])
len_rf[i,3] <- len_int(cr_rf$int_ccu[[i]]$set)
# eu-cc
cov_rf[i,4] <- cov_int(cr_rf$int_cceu[[i]]$set, ytest[i])
len_rf[i,4] <- len_int(cr_rf$int_cceu[[i]]$set)
# cc
cov_rf[i,5] <- cov_int(cr_rf$int_ccs[[i]]$set, ytest[i])
len_rf[i,5] <- len_int(cr_rf$int_ccs[[i]]$set)
# splt
cov_rf[i,6] <- cov_int(matrix(c(splt_rf$lo[i], splt_rf$up[i]), ncol = 2), ytest[i])
len_rf[i,6] <- len_int(matrix(c(splt_rf$lo[i], splt_rf$up[i]), ncol = 2))
# splt2
cov_rf[i,7] <- cov_int(matrix(c(splt_rf2$lo[i], splt_rf2$up[i]), ncol = 2), ytest[i])
len_rf[i,7] <- len_int(matrix(c(splt_rf2$lo[i], splt_rf2$up[i]), ncol = 2))
}
cov_rf_fn <- rbind(cov_rf_fn, cov_rf)
len_rf_fn <- rbind(len_rf_fn, len_rf)
cov_res_rf[b,] <- colMeans(cov_rf)
len_res_rf[b,] <- colMeans(len_rf)
cat(b,"\n")
}
load("abalone100.Rdata")
rm(list=ls())
load("abalone100.Rdata")
tab <- rbind(
#c("mod-cross", "e-mod-cross", "u-mod-cross", "eu-mod-cross", "cross", "split", "split(2alpha)"),
apply(len_res_rf, 2, mean),
apply(len_res_rf, 2, sd),
apply(len_res_rf, 2, median),
apply(len_res_rf, 2, min),
apply(len_res_rf, 2, max),
apply(cov_res_rf, 2, mean)
)
rownames(tab) <- c("Mean", "Sd", "Median", "Min", "Max", "Coverage")
xtable::xtable(tab, digits = 3)
load(abaloneK5.RData)
load(abaloneK5.Rdata)
load("abaloneK5.Rdata)
load("abaloneK5.Rdata")
tab <- rbind(
#c("mod-cross", "e-mod-cross", "u-mod-cross", "eu-mod-cross", "cross", "split", "split(2alpha)"),
apply(len_res_rf, 2, mean),
apply(len_res_rf, 2, sd),
apply(len_res_rf, 2, median),
apply(len_res_rf, 2, min),
apply(len_res_rf, 2, max),
apply(cov_res_rf, 2, mean)
)
rownames(tab) <- c("Mean", "Sd", "Median", "Min", "Max", "Coverage")
xtable::xtable(tab[,c(1,2,3,4,6,7)], digits = 3)
load("abaloneK20.Rdata")
tab <- rbind(
#c("mod-cross", "e-mod-cross", "u-mod-cross", "eu-mod-cross", "cross", "split", "split(2alpha)"),
apply(len_res_rf, 2, mean),
apply(len_res_rf, 2, sd),
apply(len_res_rf, 2, median),
apply(len_res_rf, 2, min),
apply(len_res_rf, 2, max),
apply(cov_res_rf, 2, mean)
)
rownames(tab) <- c("Mean", "Sd", "Median", "Min", "Max", "Coverage")
xtable::xtable(tab, digits = 3)
rm(list=ls())
load("energy_r.Rdata")
setwd("~/Downloads/ab/Energy")
load("energy_r.Rdata")
tab <- rbind(
#c("mod-cross", "e-mod-cross", "u-mod-cross", "eu-mod-cross", "cross", "split", "full"),
apply(len_res_rf, 2, mean),
apply(len_res_rf, 2, sd),
apply(len_res_rf, 2, median),
apply(len_res_rf, 2, min),
apply(len_res_rf, 2, max),
apply(cov_res_rf, 2, mean)
)
tab <- tab[,c(1:5,8,10,9,6:7)]
xtable::xtable(tab, digits = 2)
rm(list = ls())
library(tidyr)
library(dplyr)
library(conformalInference)
source("utils2.R")
load("energy.RData")
# set hyper parameters
n <- NROW(y)
p <- NCOL(y)
n_train <- 30000
n_test  <- n-n_train
K       <- 10
alpha   <- 0.1
ntree   <- 100
funs1 <- rf.funs(ntree=ntree)
# Simulation study
B <- 100
cov_rf_fn  <- len_rf_fn <- NULL
cov_res_rf <- len_res_rf <- matrix(NA, ncol = 10, nrow = B)
for(b in 1:B){
set.seed(b+123)
train <- sample(1:NROW(y), n_train, replace = F)
test  <- sample(setdiff(1:NROW(y), train), n_test)
ytrain <- y[train]
Xtrain <- X[train,]
ytest <- y[test]
Xtest <- X[test,]
# Cross-conf
cr_rf <- cc_rf(y = ytrain, X = Xtrain, x_test = Xtest, K = K, alpha = alpha, ntree = ntree)
# split
splt_rf <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = Xtest, train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha)
# split2
splt2_rf <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = Xtest, train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = 2*alpha)
# bonf
splt3_rf <- conformal.pred.split(x = Xtrain, y = ytrain, x0 = Xtest, train.fun = funs1$train.fun, predict.fun = funs1$predict.fun, alpha = alpha, rho = (K-1)/K)
cov_rf <- len_rf <- matrix(NA, ncol = 10, nrow = n_test)
for(i in 1:n_test){
# mod-cc
cov_rf[i,1]    <- cov_int(cr_rf$int_cc[[i]]$set, ytest[i])
len_rf[i,1]    <- len_int(cr_rf$int_cc[[i]]$set)
# e-cc
cov_rf[i,2]    <- cov_int(cr_rf$int_cce[[i]]$set, ytest[i])
len_rf[i,2]    <- len_int(cr_rf$int_cce[[i]]$set)
# u-cc
cov_rf[i,3]    <- cov_int(cr_rf$int_ccu[[i]]$set, ytest[i])
len_rf[i,3]    <- len_int(cr_rf$int_ccu[[i]]$set)
# eu-cc
cov_rf[i,4]    <- cov_int(cr_rf$int_cceu[[i]]$set, ytest[i])
len_rf[i,4]    <- len_int(cr_rf$int_cceu[[i]]$set)
# cc
cov_rf[i,5]    <- cov_int(cr_rf$int_ccs[[i]]$set, ytest[i])
len_rf[i,5]    <- len_int(cr_rf$int_ccs[[i]]$set)
# bon
cov_rf[i,6]    <- cov_int(cr_rf$int_bon[[i]]$set, ytest[i])
len_rf[i,6]    <- len_int(cr_rf$int_bon[[i]]$set)
# bonc
cov_rf[i,7]    <- cov_int(cr_rf$int_bonc[[i]]$set, ytest[i])
len_rf[i,7]    <- len_int(cr_rf$int_bonc[[i]]$set)
# splt
cov_rf[i,8]    <- cov_int(matrix(c(splt_rf$lo[i], splt_rf$up[i]), ncol = 2), ytest[i])
len_rf[i,8]    <- len_int(matrix(c(splt_rf$lo[i], splt_rf$up[i]), ncol = 2))
#splt2
cov_rf[i,9]    <- cov_int(matrix(c(splt2_rf$lo[i], splt2_rf$up[i]), ncol = 2), ytest[i])
len_rf[i,9]    <- len_int(matrix(c(splt2_rf$lo[i], splt2_rf$up[i]), ncol = 2))
#splt3
cov_rf[i,10]    <- cov_int(matrix(c(splt3_rf$lo[i], splt3_rf$up[i]), ncol = 2), ytest[i])
len_rf[i,10]    <- len_int(matrix(c(splt3_rf$lo[i], splt3_rf$up[i]), ncol = 2))
}
cov_rf_fn    <- rbind(cov_rf_fn, cov_rf)
len_rf_fn    <- rbind(len_rf_fn, len_rf)
cov_res_rf[b,]    <- colMeans(cov_rf)
len_res_rf[b,]    <- colMeans(len_rf)
cat(b,"\n")
}
rm(list = ls())
library(tidyr)
library(dplyr)
library(conformalInference)
source("utils2.R")
load("energy.RData")
rm(list = ls())
library(tidyr)
library(dplyr)
library(conformalInference)
source("utils2.R")
load("energy.RData")
rm(list = ls())
load("energy.RData")
head(X)
colnames(X) <- c("Int", "Priv", "Email", "Power", "Mail", "Height", "Is.Urb", "Sup", "Long", "Lati", "m2", "m3", "m4", "m5", "m6", "m7", "m8", "m9", "m10", "m11", "m12")
save(X,y,file="energy.RData")
rm(list = ls())
library(tidyr)
library(dplyr)
library(conformalInference)
source("utils2.R")
load("energy.RData")
X
dim(X)
head(X)
X
